/// @file system/random.h
/// Contains the declaration of System::Random class.
#pragma once

#include <random>
#include <cstdint>
#include "system/array.h"

namespace System {

/// Represents a pseudo-random number generator.
/// Objects of this class should only be allocated using System::MakeObject() function.
/// Never create instance of this type on stack or using operator new, as it will result in runtime errors and/or assertion faults.
/// Always wrap this class into System::SmartPtr pointer and use this pointer to pass it to functions as argument.
/// @code
/// #include "system/random.h"
/// #include "system/smart_ptr.h"
/// #include <iostream>
///
/// int main() {
///   const auto rnd = System::MakeObject<System::Random>();
///
///   // Get a random month number and print it.
///   auto monthNumber = rnd->Next(1, 13);
///   std::cout << "Month: " << monthNumber << std::endl;
///
///   // Fill the array with random numbers.
///   auto arr = System::MakeObject<System::Array<uint8_t>>(12);
///   rnd->NextBytes(arr);
///
///   // Print the array.
///   for (auto i = 0; i < arr->get_Length(); ++i) {
///     std::cout << static_cast<int>(arr[i]) << ' ';
///   }
///   std::cout << std::endl;
///
///   return 0;
/// }
/// /*
/// This code example produces the following output:
/// Month: 4
/// 177 213 89 240 68 182 18 96 109 131 1 78
/// */
/// @endcode
class ASPOSECPP_SHARED_CLASS Random : public Object
{
    std::mt19937 m_seed;

public:
    /// Always returns false.
    bool IsNull() const { return false; }

    /// Initializes a new instance, using a time-dependent default seed value.
    ASPOSECPP_SHARED_API Random();

    /// Initializes a new instance of the System.Random class, using the specified seed value.
    /// @param seed The seed used to generate a pseudo-random number sequence
    ASPOSECPP_SHARED_API Random(int32_t seed);

    /// Returns a nonnegative random number less then int32 max value.
    ASPOSECPP_SHARED_API virtual int32_t Next();

    /// Returns a nonnegative random number less than the specified maximum.
    /// @param maxValue Values generated by the method will be less than this value
    ASPOSECPP_SHARED_API virtual int32_t Next(int32_t maxValue);

    /// Returns a random number within the specified range.
    /// @param minValue Values generated by the method will be greater than this value
    /// @param maxValue Values generated by the method will be less than this value
    ASPOSECPP_SHARED_API virtual int32_t Next(int32_t minValue, int32_t maxValue);

    /// Fills the elements of the specified array of bytes with random numbers.
    /// @param buffer The array to fill
    ASPOSECPP_SHARED_API virtual void NextBytes(const ArrayPtr<uint8_t>& buffer);

    /// Returns a random number between 0.0 and 1.0.
    ASPOSECPP_SHARED_API virtual double NextDouble();

    /// Effectively does nothing.
    /// @returns A reference to the self
    Random& operator=(std::nullptr_t) { return *this; }
};

} // namespace System
